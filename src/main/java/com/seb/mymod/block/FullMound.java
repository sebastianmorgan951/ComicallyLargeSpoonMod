package com.seb.mymod.block;

import com.seb.mymod.tileentity.MoundTile;
import net.minecraft.block.*;
import net.minecraft.entity.item.ItemEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.*;
import net.minecraft.state.DirectionProperty;
import net.minecraft.state.StateContainer;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.*;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.BlockRayTraceResult;
import net.minecraft.util.math.shapes.IBooleanFunction;
import net.minecraft.util.math.shapes.ISelectionContext;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.math.shapes.VoxelShapes;
import net.minecraft.world.IBlockReader;
import net.minecraft.world.World;

import java.util.stream.Stream;

public class FullMound extends EmptyMound{

    public static final VoxelShape SHAPE_N = Stream.of(
            Block.makeCuboidShape(11.25736, 1, 11.44975, 14.25736, 4, 14.44975),
            Block.makeCuboidShape(0, 0, 0, 16, 3, 16),
            Block.makeCuboidShape(1, 2, 4, 4, 4, 6),
            Block.makeCuboidShape(7, 0, 5, 10, 2, 7),
            Block.makeCuboidShape(4, 0, 3, 7, 2, 5),
            Block.makeCuboidShape(9, 0, 1, 13, 5, 6),
            Block.makeCuboidShape(1, 0, 1, 5, 4, 6),
            Block.makeCuboidShape(3.61524, 1, 9.06566, 7.61524, 6, 14.06566),
            Block.makeCuboidShape(7.61524, 1, 9.06566, 11.61524, 4, 13.06566),
            Block.makeCuboidShape(1.11524, 1.5, 7.06566, 6.11524, 3.5, 12.06566),
            Block.makeCuboidShape(5, 2, 5, 6, 4, 7),
            Block.makeCuboidShape(12.25736, 2, 7.44975, 14.25736, 4, 11.44975),
            Block.makeCuboidShape(11.25736, 2, 8.44975, 12.25736, 5, 9.44975),
            Block.makeCuboidShape(0, 0, 8, 4, 4, 13),
            Block.makeCuboidShape(7.25736, 2.5, 3.94975, 8.25736, 3.5, 6.94975),
            Block.makeCuboidShape(7.25736, 2.5, 2.94975, 9.25736, 3.5, 5.94975),
            Block.makeCuboidShape(7.25736, 2.5, 5.94975, 11.25736, 4.5, 9.94975),
            Block.makeCuboidShape(11.25736, 2, 11.44975, 13.25736, 7, 13.44975),
            Block.makeCuboidShape(11.25736, 2, 9.44975, 13.25736, 4, 11.44975),
            Block.makeCuboidShape(8.25736, 2, 12.44975, 10.25736, 4, 14.44975),
            Block.makeCuboidShape(2.25736, 2, 0.44975, 4.25736, 4, 5.44975),
            Block.makeCuboidShape(7, 1.8311795099062609, 2.9103024818541323, 9, 2.831179509906261, 3.9103024818541323),
            Block.makeCuboidShape(7, 5.8311795099062635, 6.910302481854135, 9, 6.8311795099062635, 7.910302481854135),
            Block.makeCuboidShape(7, 3.8311795099062618, 4.910302481854135, 9, 4.831179509906262, 5.910302481854135),
            Block.makeCuboidShape(7, 7.8311795099062635, 8.910302481854137, 9, 8.831179509906264, 9.910302481854137),
            Block.makeCuboidShape(7, 2.8311795099062618, 3.910302481854135, 9, 3.8311795099062618, 4.910302481854135),
            Block.makeCuboidShape(7, 6.8311795099062635, 7.910302481854135, 9, 7.8311795099062635, 8.910302481854135),
            Block.makeCuboidShape(7, 4.8311795099062635, 5.910302481854135, 9, 5.8311795099062635, 6.910302481854135),
            Block.makeCuboidShape(7, 8.831179509906265, 9.910302481854137, 9, 9.831179509906265, 10.910302481854137),
            Block.makeCuboidShape(7, 1.8311795099062627, 3.9103024818541314, 9, 2.8311795099062627, 4.910302481854131),
            Block.makeCuboidShape(7, 5.831179509906265, 7.910302481854137, 9, 6.831179509906265, 8.910302481854137),
            Block.makeCuboidShape(7, 3.8311795099062635, 5.910302481854135, 9, 4.8311795099062635, 6.910302481854135),
            Block.makeCuboidShape(7, 7.831179509906267, 9.910302481854137, 9, 8.831179509906267, 10.910302481854137),
            Block.makeCuboidShape(7, 2.8311795099062627, 4.910302481854134, 9, 3.8311795099062627, 5.910302481854134),
            Block.makeCuboidShape(7, 6.8311795099062635, 8.910302481854135, 9, 7.8311795099062635, 9.910302481854135),
            Block.makeCuboidShape(7, 4.8311795099062635, 6.910302481854133, 9, 5.8311795099062635, 7.910302481854133),
            Block.makeCuboidShape(7, 8.831179509906265, 10.910302481854135, 9, 9.831179509906265, 11.910302481854135),
            Block.makeCuboidShape(7, 2.8311795099062635, 2.910302481854135, 9, 3.8311795099062635, 3.910302481854135),
            Block.makeCuboidShape(7, 6.831179509906265, 6.910302481854136, 9, 7.831179509906265, 7.910302481854135),
            Block.makeCuboidShape(7, 4.831179509906265, 4.910302481854135, 9, 5.831179509906265, 5.910302481854135),
            Block.makeCuboidShape(7, 8.831179509906267, 8.910302481854139, 9, 9.831179509906267, 9.910302481854139),
            Block.makeCuboidShape(7, 3.8311795099062635, 3.910302481854135, 9, 4.8311795099062635, 4.910302481854135),
            Block.makeCuboidShape(7, 7.831179509906265, 7.910302481854137, 9, 8.831179509906265, 8.910302481854137),
            Block.makeCuboidShape(7, 5.831179509906265, 5.910302481854136, 9, 6.831179509906265, 6.910302481854136),
            Block.makeCuboidShape(7, 9.831179509906267, 9.910302481854139, 9, 10.831179509906267, 10.910302481854139),
            Block.makeCuboidShape(7, 9.831179509906264, 10.910302481854137, 9, 10.831179509906264, 11.910302481854137),
            Block.makeCuboidShape(7, 10.831179509906267, 11.91030248185414, 9, 11.831179509906267, 12.91030248185414),
            Block.makeCuboidShape(7, 13.83117950990627, 13.910302481854142, 9, 14.83117950990627, 14.910302481854142),
            Block.makeCuboidShape(7, 12.83117950990627, 14.910302481854142, 9, 14.83117950990627, 15.910302481854142),
            Block.makeCuboidShape(7, 14.831179509906278, 14.910302481854147, 9, 16.831179509906278, 15.910302481854146),
            Block.makeCuboidShape(7, 11.83117950990627, 12.910302481854142, 9, 12.83117950990627, 14.910302481854142),
            Block.makeCuboidShape(7, 13.831179509906274, 15.910302481854146, 9, 14.831179509906274, 17.910302481854146),
            Block.makeCuboidShape(7, 12.83117950990627, 12.910302481854142, 9, 13.83117950990627, 14.910302481854142),
            Block.makeCuboidShape(7, 11.83117950990627, 8.910302481854142, 9, 12.83117950990627, 12.910302481854142),
            Block.makeCuboidShape(7, 12.831179509906274, 9.910302481854146, 9, 13.831179509906274, 11.910302481854146),
            Block.makeCuboidShape(7, 12.83117950990627, 7.910302481854142, 9, 14.83117950990627, 8.910302481854142),
            Block.makeCuboidShape(7, 14.831179509906274, 15.91030248185415, 9, 16.831179509906274, 17.91030248185415),
            Block.makeCuboidShape(7, 12.83117950990627, 8.910302481854142, 9, 14.83117950990627, 9.910302481854142),
            Block.makeCuboidShape(7, 7.831179509906269, 12.910302481854142, 9, 11.831179509906269, 13.910302481854142),
            Block.makeCuboidShape(7, 8.831179509906272, 13.910302481854142, 9, 10.831179509906272, 14.910302481854142),
            Block.makeCuboidShape(7, 6.831179509906269, 13.910302481854142, 9, 7.831179509906269, 15.910302481854142),
            Block.makeCuboidShape(7, 7.831179509906271, 13.910302481854144, 9, 8.83117950990627, 15.910302481854146),
            Block.makeCuboidShape(7, 8.831179509906265, 11.910302481854139, 9, 10.831179509906265, 12.910302481854139),
            Block.makeCuboidShape(7, 10.831179509906265, 9.910302481854139, 9, 11.831179509906265, 11.910302481854139),
            Block.makeCuboidShape(7, 0.8311795099062618, 3.9103024818541323, 9, 1.8311795099062618, 4.910302481854132),
            Block.makeCuboidShape(7, 4.8311795099062635, 7.910302481854135, 9, 5.8311795099062635, 8.910302481854135),
            Block.makeCuboidShape(7, 2.8311795099062627, 5.910302481854134, 9, 3.8311795099062627, 6.910302481854134),
            Block.makeCuboidShape(7, 6.831179509906265, 9.910302481854137, 9, 7.831179509906265, 10.910302481854137),
            Block.makeCuboidShape(7, 1.8311795099062627, 4.910302481854133, 9, 2.8311795099062627, 5.910302481854133),
            Block.makeCuboidShape(7, 5.8311795099062635, 8.910302481854135, 9, 6.8311795099062635, 9.910302481854135),
            Block.makeCuboidShape(7, 3.8311795099062635, 6.910302481854134, 9, 4.8311795099062635, 7.910302481854135),
            Block.makeCuboidShape(7, 7.831179509906265, 10.910302481854137, 9, 8.831179509906265, 11.910302481854137),
            Block.makeCuboidShape(7, 2.83117950990626, 1.9103024818541332, 9, 3.83117950990626, 2.910302481854133),
            Block.makeCuboidShape(7, 6.8311795099062635, 5.910302481854135, 9, 7.8311795099062635, 6.910302481854135),
            Block.makeCuboidShape(7, 4.831179509906262, 3.910302481854135, 9, 5.831179509906262, 4.910302481854135),
            Block.makeCuboidShape(7, 8.831179509906264, 7.910302481854137, 9, 9.831179509906264, 8.910302481854137),
            Block.makeCuboidShape(7, 3.8311795099062635, 2.910302481854134, 9, 4.8311795099062635, 3.910302481854134),
            Block.makeCuboidShape(7, 7.8311795099062635, 6.910302481854136, 9, 8.831179509906264, 7.910302481854135),
            Block.makeCuboidShape(7, 5.8311795099062635, 4.910302481854135, 9, 6.8311795099062635, 5.910302481854135),
            Block.makeCuboidShape(7, 9.831179509906265, 8.910302481854137, 9, 10.831179509906265, 9.910302481854137)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    public static final VoxelShape SHAPE_E = Stream.of(
            Block.makeCuboidShape(-0.7885108717497147, 5.689438240742275, 11.25736, 2.2114891282502853, 8.689438240742275, 14.25736),
            Block.makeCuboidShape(0, 0, 0, 16, 3, 16),
            Block.makeCuboidShape(6.039918043174588, 0.7752228881910659, 1, 8.039918043174588, 2.775222888191066, 4),
            Block.makeCuboidShape(9, 2.737287581744967, 8.909244221472743, 11, 4.737287581744967, 11.909244221472743),
            Block.makeCuboidShape(11, 1.5892372846496983, 6.137605623938883, 13, 3.5892372846496983, 9.137605623938883),
            Block.makeCuboidShape(4.6257044808014935, -0.6389906741820299, 9, 9.625704480801494, 4.36100932581797, 13),
            Block.makeCuboidShape(7.867777835888084, -8.881784197001252e-16, 6.2956099270521015, 12.867777835888084, 3.999999999999999, 10.295609927052102),
            Block.makeCuboidShape(1.9343400000000006, 2.182059494416281, 2.590115882139318, 6.934340000000001, 7.182059494416281, 6.590115882139318),
            Block.makeCuboidShape(4.268964411921246, 0.6260964432610461, 7.61524, 8.268964411921246, 3.626096443261046, 11.61524),
            Block.makeCuboidShape(2.7682740512137123, 1.9734970617114644, 1.11524, 7.768274051213712, 3.9734970617114644, 6.11524),
            Block.makeCuboidShape(5.210923586395705, 2, 6.2956099270521, 7.210923586395705, 4, 7.2956099270521),
            Block.makeCuboidShape(4.55025, 2, 12.25736, 8.55025, 4, 14.25736),
            Block.makeCuboidShape(5.145958977900195, 2.2758587426278387, 11.25736, 6.145958977900195, 5.275858742627839, 12.25736),
            Block.makeCuboidShape(3.376096776384701, -8.881784197001252e-16, 0.25720408368057424, 8.376096776384701, 3.999999999999999, 4.257204083680574),
            Block.makeCuboidShape(10.148730433529252, 4.313272391658833, 7.25736, 13.148730433529252, 5.313272391658833, 8.25736),
            Block.makeCuboidShape(9.005786444110331, 2.5, 4.369052178427333, 12.005786444110331, 3.5, 6.369052178427333),
            Block.makeCuboidShape(6.17735931936414, 2.5, 7.197479303173523, 10.17735931936414, 4.5, 11.197479303173523),
            Block.makeCuboidShape(2.55025, 5.678828686219033, 12.772088368377789, 4.55025, 10.678828686219033, 14.772088368377789),
            Block.makeCuboidShape(4.55025, 5.678828686219033, 12.772088368377789, 6.55025, 7.678828686219033, 14.772088368377789),
            Block.makeCuboidShape(1.5502500000000001, 2, 8.25736, 3.55025, 4, 10.25736),
            Block.makeCuboidShape(10.55025, 0.24461434897813294, 4.065690653167325, 15.550249999999998, 2.244614348978133, 6.065690653167325),
            Block.makeCuboidShape(12.089697518145869, 1.8311795099062609, 7, 13.089697518145869, 2.831179509906261, 9),
            Block.makeCuboidShape(8.089697518145865, 5.8311795099062635, 7, 9.089697518145865, 6.8311795099062635, 9),
            Block.makeCuboidShape(10.089697518145865, 3.8311795099062618, 7, 11.089697518145865, 4.831179509906262, 9),
            Block.makeCuboidShape(6.089697518145863, 7.8311795099062635, 7, 7.089697518145863, 8.831179509906264, 9),
            Block.makeCuboidShape(11.089697518145865, 2.8311795099062618, 7, 12.089697518145865, 3.8311795099062618, 9),
            Block.makeCuboidShape(7.089697518145865, 6.8311795099062635, 7, 8.089697518145865, 7.8311795099062635, 9),
            Block.makeCuboidShape(9.089697518145865, 4.8311795099062635, 7, 10.089697518145865, 5.8311795099062635, 9),
            Block.makeCuboidShape(5.089697518145863, 8.831179509906265, 7, 6.089697518145863, 9.831179509906265, 9),
            Block.makeCuboidShape(11.089697518145869, 1.8311795099062627, 7, 12.089697518145869, 2.8311795099062627, 9),
            Block.makeCuboidShape(7.089697518145863, 5.831179509906265, 7, 8.089697518145863, 6.831179509906265, 9),
            Block.makeCuboidShape(9.089697518145865, 3.8311795099062635, 7, 10.089697518145865, 4.8311795099062635, 9),
            Block.makeCuboidShape(5.089697518145863, 7.831179509906267, 7, 6.089697518145863, 8.831179509906267, 9),
            Block.makeCuboidShape(10.089697518145865, 2.8311795099062627, 7, 11.089697518145865, 3.8311795099062627, 9),
            Block.makeCuboidShape(6.089697518145865, 6.8311795099062635, 7, 7.089697518145865, 7.8311795099062635, 9),
            Block.makeCuboidShape(8.089697518145867, 4.8311795099062635, 7, 9.089697518145867, 5.8311795099062635, 9),
            Block.makeCuboidShape(4.089697518145865, 8.831179509906265, 7, 5.089697518145865, 9.831179509906265, 9),
            Block.makeCuboidShape(12.089697518145865, 2.8311795099062635, 7, 13.089697518145865, 3.8311795099062635, 9),
            Block.makeCuboidShape(8.089697518145865, 6.831179509906265, 7, 9.089697518145865, 7.831179509906265, 9),
            Block.makeCuboidShape(10.089697518145865, 4.831179509906265, 7, 11.089697518145865, 5.831179509906265, 9),
            Block.makeCuboidShape(6.0896975181458615, 8.831179509906267, 7, 7.0896975181458615, 9.831179509906267, 9),
            Block.makeCuboidShape(11.089697518145865, 3.8311795099062635, 7, 12.089697518145865, 4.8311795099062635, 9),
            Block.makeCuboidShape(7.089697518145863, 7.831179509906265, 7, 8.089697518145863, 8.831179509906265, 9),
            Block.makeCuboidShape(9.089697518145865, 5.831179509906265, 7, 10.089697518145865, 6.831179509906265, 9),
            Block.makeCuboidShape(5.0896975181458615, 9.831179509906267, 7, 6.0896975181458615, 10.831179509906267, 9),
            Block.makeCuboidShape(4.089697518145863, 9.831179509906264, 7, 5.089697518145863, 10.831179509906264, 9),
            Block.makeCuboidShape(3.0896975181458597, 10.831179509906267, 7, 4.08969751814586, 11.831179509906267, 9),
            Block.makeCuboidShape(1.089697518145858, 13.83117950990627, 7, 2.089697518145858, 14.83117950990627, 9),
            Block.makeCuboidShape(0.08969751814585791, 12.83117950990627, 7, 1.089697518145858, 14.83117950990627, 9),
            Block.makeCuboidShape(0.08969751814585436, 14.831179509906278, 7, 1.0896975181458526, 16.831179509906278, 9),
            Block.makeCuboidShape(1.089697518145858, 11.83117950990627, 7, 3.089697518145858, 12.83117950990627, 9),
            Block.makeCuboidShape(-1.9103024818541456, 13.831179509906274, 7, 0.08969751814585436, 14.831179509906274, 9),
            Block.makeCuboidShape(1.089697518145858, 12.83117950990627, 7, 3.089697518145858, 13.83117950990627, 9),
            Block.makeCuboidShape(3.089697518145858, 11.83117950990627, 7, 7.089697518145858, 12.83117950990627, 9),
            Block.makeCuboidShape(4.089697518145854, 12.831179509906274, 7, 6.089697518145854, 13.831179509906274, 9),
            Block.makeCuboidShape(7.089697518145858, 12.83117950990627, 7, 8.089697518145858, 14.83117950990627, 9),
            Block.makeCuboidShape(-1.9103024818541492, 14.831179509906274, 7, 0.08969751814585081, 16.831179509906274, 9),
            Block.makeCuboidShape(6.089697518145858, 12.83117950990627, 7, 7.089697518145858, 14.83117950990627, 9),
            Block.makeCuboidShape(2.089697518145858, 7.831179509906269, 7, 3.089697518145858, 11.831179509906269, 9),
            Block.makeCuboidShape(1.089697518145858, 8.831179509906272, 7, 2.089697518145858, 10.831179509906272, 9),
            Block.makeCuboidShape(0.08969751814585791, 6.831179509906269, 7, 2.089697518145858, 7.831179509906269, 9),
            Block.makeCuboidShape(0.08969751814585436, 7.831179509906271, 7, 2.089697518145856, 8.83117950990627, 9),
            Block.makeCuboidShape(3.0896975181458615, 8.831179509906265, 7, 4.0896975181458615, 10.831179509906265, 9),
            Block.makeCuboidShape(4.0896975181458615, 10.831179509906265, 7, 6.0896975181458615, 11.831179509906265, 9),
            Block.makeCuboidShape(11.089697518145869, 0.8311795099062618, 7, 12.089697518145869, 1.8311795099062618, 9),
            Block.makeCuboidShape(7.089697518145865, 4.8311795099062635, 7, 8.089697518145865, 5.8311795099062635, 9),
            Block.makeCuboidShape(9.089697518145865, 2.8311795099062627, 7, 10.089697518145865, 3.8311795099062627, 9),
            Block.makeCuboidShape(5.089697518145863, 6.831179509906265, 7, 6.089697518145863, 7.831179509906265, 9),
            Block.makeCuboidShape(10.089697518145867, 1.8311795099062627, 7, 11.089697518145867, 2.8311795099062627, 9),
            Block.makeCuboidShape(6.089697518145865, 5.8311795099062635, 7, 7.089697518145865, 6.8311795099062635, 9),
            Block.makeCuboidShape(8.089697518145865, 3.8311795099062635, 7, 9.089697518145865, 4.8311795099062635, 9),
            Block.makeCuboidShape(4.089697518145863, 7.831179509906265, 7, 5.089697518145863, 8.831179509906265, 9),
            Block.makeCuboidShape(13.089697518145867, 2.83117950990626, 7, 14.089697518145867, 3.83117950990626, 9),
            Block.makeCuboidShape(9.089697518145865, 6.8311795099062635, 7, 10.089697518145865, 7.8311795099062635, 9),
            Block.makeCuboidShape(11.089697518145865, 4.831179509906262, 7, 12.089697518145865, 5.831179509906262, 9),
            Block.makeCuboidShape(7.089697518145863, 8.831179509906264, 7, 8.089697518145863, 9.831179509906264, 9),
            Block.makeCuboidShape(12.089697518145865, 3.8311795099062635, 7, 13.089697518145865, 4.8311795099062635, 9),
            Block.makeCuboidShape(8.089697518145865, 7.8311795099062635, 7, 9.089697518145865, 8.831179509906264, 9),
            Block.makeCuboidShape(10.089697518145865, 5.8311795099062635, 7, 11.089697518145865, 6.8311795099062635, 9),
            Block.makeCuboidShape(6.089697518145863, 9.831179509906265, 7, 7.089697518145863, 10.831179509906265, 9)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    public static final VoxelShape SHAPE_S = Stream.of(
            Block.makeCuboidShape(1.7426399999999997, 5.689438240742275, -0.7885108717497147, 4.74264, 8.689438240742275, 2.2114891282502853),
            Block.makeCuboidShape(0, 0, 0, 16, 3, 16),
            Block.makeCuboidShape(12, 0.7752228881910659, 6.039918043174588, 15, 2.775222888191066, 8.039918043174588),
            Block.makeCuboidShape(4.090755778527257, 2.737287581744967, 9, 7.090755778527257, 4.737287581744967, 11),
            Block.makeCuboidShape(6.862394376061117, 1.5892372846496983, 11, 9.862394376061117, 3.5892372846496983, 13),
            Block.makeCuboidShape(3, -0.6389906741820299, 4.6257044808014935, 7, 4.36100932581797, 9.625704480801494),
            Block.makeCuboidShape(5.7043900729478985, -8.881784197001252e-16, 7.867777835888084, 9.704390072947898, 3.999999999999999, 12.867777835888084),
            Block.makeCuboidShape(9.409884117860681, 2.182059494416281, 1.9343400000000006, 13.409884117860681, 7.182059494416281, 6.934340000000001),
            Block.makeCuboidShape(4.38476, 0.6260964432610461, 4.268964411921246, 8.38476, 3.626096443261046, 8.268964411921246),
            Block.makeCuboidShape(9.88476, 1.9734970617114644, 2.7682740512137123, 14.88476, 3.9734970617114644, 7.768274051213712),
            Block.makeCuboidShape(8.7043900729479, 2, 5.210923586395705, 9.7043900729479, 4, 7.210923586395705),
            Block.makeCuboidShape(1.7426399999999997, 2, 4.55025, 3.7426399999999997, 4, 8.55025),
            Block.makeCuboidShape(3.7426399999999997, 2.2758587426278387, 5.145958977900195, 4.74264, 5.275858742627839, 6.145958977900195),
            Block.makeCuboidShape(11.742795916319427, -8.881784197001252e-16, 3.376096776384701, 15.742795916319427, 3.999999999999999, 8.376096776384701),
            Block.makeCuboidShape(7.74264, 4.313272391658833, 10.148730433529252, 8.74264, 5.313272391658833, 13.148730433529252),
            Block.makeCuboidShape(9.630947821572667, 2.5, 9.005786444110331, 11.630947821572667, 3.5, 12.005786444110331),
            Block.makeCuboidShape(4.802520696826477, 2.5, 6.17735931936414, 8.802520696826477, 4.5, 10.17735931936414),
            Block.makeCuboidShape(1.2279116316222112, 5.678828686219033, 2.55025, 3.227911631622211, 10.678828686219033, 4.55025),
            Block.makeCuboidShape(1.2279116316222112, 5.678828686219033, 4.55025, 3.227911631622211, 7.678828686219033, 6.55025),
            Block.makeCuboidShape(5.74264, 2, 1.5502500000000001, 7.74264, 4, 3.55025),
            Block.makeCuboidShape(9.934309346832675, 0.24461434897813294, 10.55025, 11.934309346832675, 2.244614348978133, 15.550249999999998),
            Block.makeCuboidShape(7, 1.8311795099062609, 12.089697518145869, 9, 2.831179509906261, 13.089697518145869),
            Block.makeCuboidShape(7, 5.8311795099062635, 8.089697518145865, 9, 6.8311795099062635, 9.089697518145865),
            Block.makeCuboidShape(7, 3.8311795099062618, 10.089697518145865, 9, 4.831179509906262, 11.089697518145865),
            Block.makeCuboidShape(7, 7.8311795099062635, 6.089697518145863, 9, 8.831179509906264, 7.089697518145863),
            Block.makeCuboidShape(7, 2.8311795099062618, 11.089697518145865, 9, 3.8311795099062618, 12.089697518145865),
            Block.makeCuboidShape(7, 6.8311795099062635, 7.089697518145865, 9, 7.8311795099062635, 8.089697518145865),
            Block.makeCuboidShape(7, 4.8311795099062635, 9.089697518145865, 9, 5.8311795099062635, 10.089697518145865),
            Block.makeCuboidShape(7, 8.831179509906265, 5.089697518145863, 9, 9.831179509906265, 6.089697518145863),
            Block.makeCuboidShape(7, 1.8311795099062627, 11.089697518145869, 9, 2.8311795099062627, 12.089697518145869),
            Block.makeCuboidShape(7, 5.831179509906265, 7.089697518145863, 9, 6.831179509906265, 8.089697518145863),
            Block.makeCuboidShape(7, 3.8311795099062635, 9.089697518145865, 9, 4.8311795099062635, 10.089697518145865),
            Block.makeCuboidShape(7, 7.831179509906267, 5.089697518145863, 9, 8.831179509906267, 6.089697518145863),
            Block.makeCuboidShape(7, 2.8311795099062627, 10.089697518145865, 9, 3.8311795099062627, 11.089697518145865),
            Block.makeCuboidShape(7, 6.8311795099062635, 6.089697518145865, 9, 7.8311795099062635, 7.089697518145865),
            Block.makeCuboidShape(7, 4.8311795099062635, 8.089697518145867, 9, 5.8311795099062635, 9.089697518145867),
            Block.makeCuboidShape(7, 8.831179509906265, 4.089697518145865, 9, 9.831179509906265, 5.089697518145865),
            Block.makeCuboidShape(7, 2.8311795099062635, 12.089697518145865, 9, 3.8311795099062635, 13.089697518145865),
            Block.makeCuboidShape(7, 6.831179509906265, 8.089697518145865, 9, 7.831179509906265, 9.089697518145865),
            Block.makeCuboidShape(7, 4.831179509906265, 10.089697518145865, 9, 5.831179509906265, 11.089697518145865),
            Block.makeCuboidShape(7, 8.831179509906267, 6.0896975181458615, 9, 9.831179509906267, 7.0896975181458615),
            Block.makeCuboidShape(7, 3.8311795099062635, 11.089697518145865, 9, 4.8311795099062635, 12.089697518145865),
            Block.makeCuboidShape(7, 7.831179509906265, 7.089697518145863, 9, 8.831179509906265, 8.089697518145863),
            Block.makeCuboidShape(7, 5.831179509906265, 9.089697518145865, 9, 6.831179509906265, 10.089697518145865),
            Block.makeCuboidShape(7, 9.831179509906267, 5.0896975181458615, 9, 10.831179509906267, 6.0896975181458615),
            Block.makeCuboidShape(7, 9.831179509906264, 4.089697518145863, 9, 10.831179509906264, 5.089697518145863),
            Block.makeCuboidShape(7, 10.831179509906267, 3.0896975181458597, 9, 11.831179509906267, 4.08969751814586),
            Block.makeCuboidShape(7, 13.83117950990627, 1.089697518145858, 9, 14.83117950990627, 2.089697518145858),
            Block.makeCuboidShape(7, 12.83117950990627, 0.08969751814585791, 9, 14.83117950990627, 1.089697518145858),
            Block.makeCuboidShape(7, 14.831179509906278, 0.08969751814585436, 9, 16.831179509906278, 1.0896975181458526),
            Block.makeCuboidShape(7, 11.83117950990627, 1.089697518145858, 9, 12.83117950990627, 3.089697518145858),
            Block.makeCuboidShape(7, 13.831179509906274, -1.9103024818541456, 9, 14.831179509906274, 0.08969751814585436),
            Block.makeCuboidShape(7, 12.83117950990627, 1.089697518145858, 9, 13.83117950990627, 3.089697518145858),
            Block.makeCuboidShape(7, 11.83117950990627, 3.089697518145858, 9, 12.83117950990627, 7.089697518145858),
            Block.makeCuboidShape(7, 12.831179509906274, 4.089697518145854, 9, 13.831179509906274, 6.089697518145854),
            Block.makeCuboidShape(7, 12.83117950990627, 7.089697518145858, 9, 14.83117950990627, 8.089697518145858),
            Block.makeCuboidShape(7, 14.831179509906274, -1.9103024818541492, 9, 16.831179509906274, 0.08969751814585081),
            Block.makeCuboidShape(7, 12.83117950990627, 6.089697518145858, 9, 14.83117950990627, 7.089697518145858),
            Block.makeCuboidShape(7, 7.831179509906269, 2.089697518145858, 9, 11.831179509906269, 3.089697518145858),
            Block.makeCuboidShape(7, 8.831179509906272, 1.089697518145858, 9, 10.831179509906272, 2.089697518145858),
            Block.makeCuboidShape(7, 6.831179509906269, 0.08969751814585791, 9, 7.831179509906269, 2.089697518145858),
            Block.makeCuboidShape(7, 7.831179509906271, 0.08969751814585436, 9, 8.83117950990627, 2.089697518145856),
            Block.makeCuboidShape(7, 8.831179509906265, 3.0896975181458615, 9, 10.831179509906265, 4.0896975181458615),
            Block.makeCuboidShape(7, 10.831179509906265, 4.0896975181458615, 9, 11.831179509906265, 6.0896975181458615),
            Block.makeCuboidShape(7, 0.8311795099062618, 11.089697518145869, 9, 1.8311795099062618, 12.089697518145869),
            Block.makeCuboidShape(7, 4.8311795099062635, 7.089697518145865, 9, 5.8311795099062635, 8.089697518145865),
            Block.makeCuboidShape(7, 2.8311795099062627, 9.089697518145865, 9, 3.8311795099062627, 10.089697518145865),
            Block.makeCuboidShape(7, 6.831179509906265, 5.089697518145863, 9, 7.831179509906265, 6.089697518145863),
            Block.makeCuboidShape(7, 1.8311795099062627, 10.089697518145867, 9, 2.8311795099062627, 11.089697518145867),
            Block.makeCuboidShape(7, 5.8311795099062635, 6.089697518145865, 9, 6.8311795099062635, 7.089697518145865),
            Block.makeCuboidShape(7, 3.8311795099062635, 8.089697518145865, 9, 4.8311795099062635, 9.089697518145865),
            Block.makeCuboidShape(7, 7.831179509906265, 4.089697518145863, 9, 8.831179509906265, 5.089697518145863),
            Block.makeCuboidShape(7, 2.83117950990626, 13.089697518145867, 9, 3.83117950990626, 14.089697518145867),
            Block.makeCuboidShape(7, 6.8311795099062635, 9.089697518145865, 9, 7.8311795099062635, 10.089697518145865),
            Block.makeCuboidShape(7, 4.831179509906262, 11.089697518145865, 9, 5.831179509906262, 12.089697518145865),
            Block.makeCuboidShape(7, 8.831179509906264, 7.089697518145863, 9, 9.831179509906264, 8.089697518145863),
            Block.makeCuboidShape(7, 3.8311795099062635, 12.089697518145865, 9, 4.8311795099062635, 13.089697518145865),
            Block.makeCuboidShape(7, 7.8311795099062635, 8.089697518145865, 9, 8.831179509906264, 9.089697518145865),
            Block.makeCuboidShape(7, 5.8311795099062635, 10.089697518145865, 9, 6.8311795099062635, 11.089697518145865),
            Block.makeCuboidShape(7, 9.831179509906265, 6.089697518145863, 9, 10.831179509906265, 7.089697518145863)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    public static final VoxelShape SHAPE_W = Stream.of(
            Block.makeCuboidShape(13.788510871749715, 5.689438240742275, 1.7426399999999997, 16.788510871749715, 8.689438240742275, 4.74264),
            Block.makeCuboidShape(0, 0, 0, 16, 3, 16),
            Block.makeCuboidShape(7.960081956825412, 0.7752228881910659, 12, 9.960081956825412, 2.775222888191066, 15),
            Block.makeCuboidShape(5, 2.737287581744967, 4.090755778527257, 7, 4.737287581744967, 7.090755778527257),
            Block.makeCuboidShape(3, 1.5892372846496983, 6.862394376061117, 5, 3.5892372846496983, 9.862394376061117),
            Block.makeCuboidShape(6.3742955191985065, -0.6389906741820299, 3, 11.374295519198506, 4.36100932581797, 7),
            Block.makeCuboidShape(3.1322221641119157, -8.881784197001252e-16, 5.7043900729478985, 8.132222164111916, 3.999999999999999, 9.704390072947898),
            Block.makeCuboidShape(9.06566, 2.182059494416281, 9.409884117860681, 14.06566, 7.182059494416281, 13.409884117860681),
            Block.makeCuboidShape(7.731035588078754, 0.6260964432610461, 4.38476, 11.731035588078754, 3.626096443261046, 8.38476),
            Block.makeCuboidShape(8.231725948786288, 1.9734970617114644, 9.88476, 13.231725948786288, 3.9734970617114644, 14.88476),
            Block.makeCuboidShape(8.789076413604295, 2, 8.7043900729479, 10.789076413604295, 4, 9.7043900729479),
            Block.makeCuboidShape(7.44975, 2, 1.7426399999999997, 11.44975, 4, 3.7426399999999997),
            Block.makeCuboidShape(9.854041022099805, 2.2758587426278387, 3.7426399999999997, 10.854041022099805, 5.275858742627839, 4.74264),
            Block.makeCuboidShape(7.623903223615299, -8.881784197001252e-16, 11.742795916319427, 12.623903223615299, 3.999999999999999, 15.742795916319427),
            Block.makeCuboidShape(2.851269566470748, 4.313272391658833, 7.74264, 5.851269566470748, 5.313272391658833, 8.74264),
            Block.makeCuboidShape(3.9942135558896688, 2.5, 9.630947821572667, 6.994213555889669, 3.5, 11.630947821572667),
            Block.makeCuboidShape(5.82264068063586, 2.5, 4.802520696826477, 9.82264068063586, 4.5, 8.802520696826477),
            Block.makeCuboidShape(11.44975, 5.678828686219033, 1.2279116316222112, 13.44975, 10.678828686219033, 3.227911631622211),
            Block.makeCuboidShape(9.44975, 5.678828686219033, 1.2279116316222112, 11.44975, 7.678828686219033, 3.227911631622211),
            Block.makeCuboidShape(12.44975, 2, 5.74264, 14.44975, 4, 7.74264),
            Block.makeCuboidShape(0.44975000000000165, 0.24461434897813294, 9.934309346832675, 5.44975, 2.244614348978133, 11.934309346832675),
            Block.makeCuboidShape(2.9103024818541314, 1.8311795099062609, 7, 3.9103024818541314, 2.831179509906261, 9),
            Block.makeCuboidShape(6.910302481854135, 5.8311795099062635, 7, 7.910302481854135, 6.8311795099062635, 9),
            Block.makeCuboidShape(4.910302481854135, 3.8311795099062618, 7, 5.910302481854135, 4.831179509906262, 9),
            Block.makeCuboidShape(8.910302481854137, 7.8311795099062635, 7, 9.910302481854137, 8.831179509906264, 9),
            Block.makeCuboidShape(3.910302481854135, 2.8311795099062618, 7, 4.910302481854135, 3.8311795099062618, 9),
            Block.makeCuboidShape(7.910302481854135, 6.8311795099062635, 7, 8.910302481854135, 7.8311795099062635, 9),
            Block.makeCuboidShape(5.910302481854135, 4.8311795099062635, 7, 6.910302481854135, 5.8311795099062635, 9),
            Block.makeCuboidShape(9.910302481854137, 8.831179509906265, 7, 10.910302481854137, 9.831179509906265, 9),
            Block.makeCuboidShape(3.9103024818541314, 1.8311795099062627, 7, 4.910302481854131, 2.8311795099062627, 9),
            Block.makeCuboidShape(7.910302481854137, 5.831179509906265, 7, 8.910302481854137, 6.831179509906265, 9),
            Block.makeCuboidShape(5.910302481854135, 3.8311795099062635, 7, 6.910302481854135, 4.8311795099062635, 9),
            Block.makeCuboidShape(9.910302481854137, 7.831179509906267, 7, 10.910302481854137, 8.831179509906267, 9),
            Block.makeCuboidShape(4.910302481854135, 2.8311795099062627, 7, 5.910302481854135, 3.8311795099062627, 9),
            Block.makeCuboidShape(8.910302481854135, 6.8311795099062635, 7, 9.910302481854135, 7.8311795099062635, 9),
            Block.makeCuboidShape(6.910302481854133, 4.8311795099062635, 7, 7.910302481854133, 5.8311795099062635, 9),
            Block.makeCuboidShape(10.910302481854135, 8.831179509906265, 7, 11.910302481854135, 9.831179509906265, 9),
            Block.makeCuboidShape(2.910302481854135, 2.8311795099062635, 7, 3.910302481854135, 3.8311795099062635, 9),
            Block.makeCuboidShape(6.910302481854135, 6.831179509906265, 7, 7.910302481854135, 7.831179509906265, 9),
            Block.makeCuboidShape(4.910302481854135, 4.831179509906265, 7, 5.910302481854135, 5.831179509906265, 9),
            Block.makeCuboidShape(8.910302481854139, 8.831179509906267, 7, 9.910302481854139, 9.831179509906267, 9),
            Block.makeCuboidShape(3.910302481854135, 3.8311795099062635, 7, 4.910302481854135, 4.8311795099062635, 9),
            Block.makeCuboidShape(7.910302481854137, 7.831179509906265, 7, 8.910302481854137, 8.831179509906265, 9),
            Block.makeCuboidShape(5.910302481854135, 5.831179509906265, 7, 6.910302481854135, 6.831179509906265, 9),
            Block.makeCuboidShape(9.910302481854139, 9.831179509906267, 7, 10.910302481854139, 10.831179509906267, 9),
            Block.makeCuboidShape(10.910302481854137, 9.831179509906264, 7, 11.910302481854137, 10.831179509906264, 9),
            Block.makeCuboidShape(11.91030248185414, 10.831179509906267, 7, 12.91030248185414, 11.831179509906267, 9),
            Block.makeCuboidShape(13.910302481854142, 13.83117950990627, 7, 14.910302481854142, 14.83117950990627, 9),
            Block.makeCuboidShape(14.910302481854142, 12.83117950990627, 7, 15.910302481854142, 14.83117950990627, 9),
            Block.makeCuboidShape(14.910302481854147, 14.831179509906278, 7, 15.910302481854146, 16.831179509906278, 9),
            Block.makeCuboidShape(12.910302481854142, 11.83117950990627, 7, 14.910302481854142, 12.83117950990627, 9),
            Block.makeCuboidShape(15.910302481854146, 13.831179509906274, 7, 17.910302481854146, 14.831179509906274, 9),
            Block.makeCuboidShape(12.910302481854142, 12.83117950990627, 7, 14.910302481854142, 13.83117950990627, 9),
            Block.makeCuboidShape(8.910302481854142, 11.83117950990627, 7, 12.910302481854142, 12.83117950990627, 9),
            Block.makeCuboidShape(9.910302481854146, 12.831179509906274, 7, 11.910302481854146, 13.831179509906274, 9),
            Block.makeCuboidShape(7.910302481854142, 12.83117950990627, 7, 8.910302481854142, 14.83117950990627, 9),
            Block.makeCuboidShape(15.91030248185415, 14.831179509906274, 7, 17.91030248185415, 16.831179509906274, 9),
            Block.makeCuboidShape(8.910302481854142, 12.83117950990627, 7, 9.910302481854142, 14.83117950990627, 9),
            Block.makeCuboidShape(12.910302481854142, 7.831179509906269, 7, 13.910302481854142, 11.831179509906269, 9),
            Block.makeCuboidShape(13.910302481854142, 8.831179509906272, 7, 14.910302481854142, 10.831179509906272, 9),
            Block.makeCuboidShape(13.910302481854142, 6.831179509906269, 7, 15.910302481854142, 7.831179509906269, 9),
            Block.makeCuboidShape(13.910302481854144, 7.831179509906271, 7, 15.910302481854146, 8.83117950990627, 9),
            Block.makeCuboidShape(11.910302481854139, 8.831179509906265, 7, 12.910302481854139, 10.831179509906265, 9),
            Block.makeCuboidShape(9.910302481854139, 10.831179509906265, 7, 11.910302481854139, 11.831179509906265, 9),
            Block.makeCuboidShape(3.9103024818541314, 0.8311795099062618, 7, 4.910302481854131, 1.8311795099062618, 9),
            Block.makeCuboidShape(7.910302481854135, 4.8311795099062635, 7, 8.910302481854135, 5.8311795099062635, 9),
            Block.makeCuboidShape(5.910302481854135, 2.8311795099062627, 7, 6.910302481854135, 3.8311795099062627, 9),
            Block.makeCuboidShape(9.910302481854137, 6.831179509906265, 7, 10.910302481854137, 7.831179509906265, 9),
            Block.makeCuboidShape(4.910302481854133, 1.8311795099062627, 7, 5.910302481854133, 2.8311795099062627, 9),
            Block.makeCuboidShape(8.910302481854135, 5.8311795099062635, 7, 9.910302481854135, 6.8311795099062635, 9),
            Block.makeCuboidShape(6.910302481854135, 3.8311795099062635, 7, 7.910302481854135, 4.8311795099062635, 9),
            Block.makeCuboidShape(10.910302481854137, 7.831179509906265, 7, 11.910302481854137, 8.831179509906265, 9),
            Block.makeCuboidShape(1.9103024818541332, 2.83117950990626, 7, 2.910302481854133, 3.83117950990626, 9),
            Block.makeCuboidShape(5.910302481854135, 6.8311795099062635, 7, 6.910302481854135, 7.8311795099062635, 9),
            Block.makeCuboidShape(3.910302481854135, 4.831179509906262, 7, 4.910302481854135, 5.831179509906262, 9),
            Block.makeCuboidShape(7.910302481854137, 8.831179509906264, 7, 8.910302481854137, 9.831179509906264, 9),
            Block.makeCuboidShape(2.910302481854135, 3.8311795099062635, 7, 3.910302481854135, 4.8311795099062635, 9),
            Block.makeCuboidShape(6.910302481854135, 7.8311795099062635, 7, 7.910302481854135, 8.831179509906264, 9),
            Block.makeCuboidShape(4.910302481854135, 5.8311795099062635, 7, 5.910302481854135, 6.8311795099062635, 9),
            Block.makeCuboidShape(8.910302481854137, 9.831179509906265, 7, 9.910302481854137, 10.831179509906265, 9)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    public static final VoxelShape SHAPE_N_SPOON = Stream.of(
            Block.makeCuboidShape(11.25736, 5.68944, 13.78851, 14.25736, 8.68944, 16.78851),
            Block.makeCuboidShape(0, 0, 0, 16, 3, 16),
            Block.makeCuboidShape(1, 0.77522, 7.96008, 4, 2.77522, 9.96008),
            Block.makeCuboidShape(8.90924, 2.73729, 5, 11.90924, 4.73729, 7),
            Block.makeCuboidShape(6.13761, 1.58924, 3, 9.13761, 3.58924, 5),
            Block.makeCuboidShape(9, -0.63899, 6.3743, 13, 4.36101, 11.3743),
            Block.makeCuboidShape(6.29561, 0, 3.13222, 10.29561, 4, 8.13222),
            Block.makeCuboidShape(2.59012, 2.18206, 9.06566, 6.59012, 7.18206, 14.06566),
            Block.makeCuboidShape(7.61524, 0.6261, 7.73104, 11.61524, 3.6261, 11.73104),
            Block.makeCuboidShape(1.11524, 1.9735, 8.23173, 6.11524, 3.9735, 13.23173),
            Block.makeCuboidShape(6.29561, 2, 8.78908, 7.29561, 4, 10.78908),
            Block.makeCuboidShape(12.25736, 2, 7.44975, 14.25736, 4, 11.44975),
            Block.makeCuboidShape(11.25736, 2.27586, 9.85404, 12.25736, 5.27586, 10.85404),
            Block.makeCuboidShape(0.2572, 0, 7.6239, 4.2572, 4, 12.6239),
            Block.makeCuboidShape(7.25736, 4.31327, 2.85127, 8.25736, 5.31327, 5.85127),
            Block.makeCuboidShape(4.36905, 2.5, 3.99421, 6.36905, 3.5, 6.99421),
            Block.makeCuboidShape(7.19748, 2.5, 5.82264, 11.19748, 4.5, 9.82264),
            Block.makeCuboidShape(12.77209, 5.67883, 11.44975, 14.77209, 10.67883, 13.44975),
            Block.makeCuboidShape(12.77209, 5.67883, 9.44975, 14.77209, 7.67883, 11.44975),
            Block.makeCuboidShape(8.25736, 2, 12.44975, 10.25736, 4, 14.44975),
            Block.makeCuboidShape(4.06569, 0.24461, 0.44975, 6.06569, 2.24461, 5.44975),
            Block.makeCuboidShape(7, 1.83118, 2.9103, 9, 2.83118, 3.9103),
            Block.makeCuboidShape(8, 6, 7, 10, 9, 8),
            Block.makeCuboidShape(6, 7, 2, 8, 9, 3),
            Block.makeCuboidShape(6, 4, 1, 8, 8, 2),
            Block.makeCuboidShape(6, 3, 2, 8, 5, 3),
            Block.makeCuboidShape(6, 10, 3, 8, 11, 6),
            Block.makeCuboidShape(6, 9, 2, 8, 10, 4),
            Block.makeCuboidShape(6, 11, 5, 8, 12, 10),
            Block.makeCuboidShape(6, 6, 10, 8, 10, 11),
            Block.makeCuboidShape(6, 4, 9, 8, 7, 10),
            Block.makeCuboidShape(6, 3, 8, 8, 5, 9),
            Block.makeCuboidShape(6, 10, 10, 8, 13, 11),
            Block.makeCuboidShape(6, 10, 9, 7, 11, 10),
            Block.makeCuboidShape(6, 11, 11, 8, 14, 12),
            Block.makeCuboidShape(6, 12, 12, 8, 15, 13),
            Block.makeCuboidShape(6, 13, 13, 8, 16, 14),
            Block.makeCuboidShape(6, 14, 14, 8, 17, 15),
            Block.makeCuboidShape(6, 15, 15, 8, 18, 16),
            Block.makeCuboidShape(6, 16, 16, 8, 19, 17),
            Block.makeCuboidShape(6, 17, 17, 8, 20, 18),
            Block.makeCuboidShape(6, 19, 19, 8, 22, 20),
            Block.makeCuboidShape(6, 20, 20, 8, 22, 21),
            Block.makeCuboidShape(6, 18, 18, 8, 21, 19),
            Block.makeCuboidShape(7, 3, 3, 9, 4, 8),
            Block.makeCuboidShape(7, 9, 4, 9, 10, 8),
            Block.makeCuboidShape(7, 10, 6, 9, 11, 10),
            Block.makeCuboidShape(7, 4, 4, 9, 5, 7),
            Block.makeCuboidShape(7, 7, 8, 9, 10, 10),
            Block.makeCuboidShape(7, 4, 3, 9, 9, 4),
            Block.makeCuboidShape(7, 5, 2, 9, 7, 3),
            Block.makeCuboidShape(7, 8, 4, 9, 9, 5),
            Block.makeCuboidShape(7, 4, 7, 9, 6, 8),
            Block.makeCuboidShape(7, 5, 8, 9, 7, 9),
            Block.makeCuboidShape(8, 5, 5, 10, 9, 7),
            Block.makeCuboidShape(8, 5, 4, 10, 8, 5)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    public static final VoxelShape SHAPE_E_SPOON = Stream.of(
            Block.makeCuboidShape(-0.7885099999999987, 5.68944, 11.25736, 2.2114899999999995, 8.68944, 14.25736),
            Block.makeCuboidShape(0, 0, 0, 16, 3, 16),
            Block.makeCuboidShape(6.03992, 0.77522, 1, 8.03992, 2.77522, 4),
            Block.makeCuboidShape(9, 2.73729, 8.90924, 11, 4.73729, 11.90924),
            Block.makeCuboidShape(11, 1.5892400000000002, 6.13761, 13, 3.58924, 9.13761),
            Block.makeCuboidShape(4.6257, -0.6389899999999997, 9, 9.6257, 4.36101, 13),
            Block.makeCuboidShape(7.86778, 0, 6.29561, 12.86778, 4, 10.29561),
            Block.makeCuboidShape(1.9343400000000006, 2.18206, 2.5901200000000006, 6.934340000000001, 7.18206, 6.59012),
            Block.makeCuboidShape(4.26896, 0.6261000000000001, 7.61524, 8.26896, 3.6261, 11.61524),
            Block.makeCuboidShape(2.7682699999999993, 1.9735, 1.11524, 7.768269999999999, 3.9735, 6.11524),
            Block.makeCuboidShape(5.21092, 2, 6.29561, 7.21092, 4, 7.29561),
            Block.makeCuboidShape(4.55025, 2, 12.25736, 8.55025, 4, 14.25736),
            Block.makeCuboidShape(5.1459600000000005, 2.27586, 11.25736, 6.1459600000000005, 5.27586, 12.25736),
            Block.makeCuboidShape(3.376099999999999, 0, 0.2572000000000001, 8.3761, 4, 4.2572),
            Block.makeCuboidShape(10.148729999999999, 4.31327, 7.25736, 13.14873, 5.31327, 8.25736),
            Block.makeCuboidShape(9.00579, 2.5, 4.36905, 12.00579, 3.5, 6.36905),
            Block.makeCuboidShape(6.17736, 2.5, 7.1974800000000005, 10.17736, 4.5, 11.19748),
            Block.makeCuboidShape(2.55025, 5.67883, 12.77209, 4.55025, 10.67883, 14.77209),
            Block.makeCuboidShape(4.55025, 5.67883, 12.77209, 6.55025, 7.67883, 14.77209),
            Block.makeCuboidShape(1.5502500000000001, 2, 8.25736, 3.55025, 4, 10.25736),
            Block.makeCuboidShape(10.55025, 0.24460999999999977, 4.06569, 15.55025, 2.2446099999999998, 6.06569),
            Block.makeCuboidShape(12.0897, 1.83118, 7, 13.0897, 2.83118, 9),
            Block.makeCuboidShape(8, 6, 8, 9, 9, 10),
            Block.makeCuboidShape(13, 7, 6, 14, 9, 8),
            Block.makeCuboidShape(14, 4, 6, 15, 8, 8),
            Block.makeCuboidShape(13, 3, 6, 14, 5, 8),
            Block.makeCuboidShape(10, 10, 6, 13, 11, 8),
            Block.makeCuboidShape(12, 9, 6, 14, 10, 8),
            Block.makeCuboidShape(6, 11, 6, 11, 12, 8),
            Block.makeCuboidShape(5, 6, 6, 6, 10, 8),
            Block.makeCuboidShape(6, 4, 6, 7, 7, 8),
            Block.makeCuboidShape(7, 3, 6, 8, 5, 8),
            Block.makeCuboidShape(5, 10, 6, 6, 13, 8),
            Block.makeCuboidShape(6, 10, 6, 7, 11, 7),
            Block.makeCuboidShape(4, 11, 6, 5, 14, 8),
            Block.makeCuboidShape(3, 12, 6, 4, 15, 8),
            Block.makeCuboidShape(2, 13, 6, 3, 16, 8),
            Block.makeCuboidShape(1, 14, 6, 2, 17, 8),
            Block.makeCuboidShape(0, 15, 6, 1, 18, 8),
            Block.makeCuboidShape(-1, 16, 6, 0, 19, 8),
            Block.makeCuboidShape(-2, 17, 6, -1, 20, 8),
            Block.makeCuboidShape(-4, 19, 6, -3, 22, 8),
            Block.makeCuboidShape(-5, 20, 6, -4, 22, 8),
            Block.makeCuboidShape(-3, 18, 6, -2, 21, 8),
            Block.makeCuboidShape(8, 3, 7, 13, 4, 9),
            Block.makeCuboidShape(8, 9, 7, 12, 10, 9),
            Block.makeCuboidShape(6, 10, 7, 10, 11, 9),
            Block.makeCuboidShape(9, 4, 7, 12, 5, 9),
            Block.makeCuboidShape(6, 7, 7, 8, 10, 9),
            Block.makeCuboidShape(12, 4, 7, 13, 9, 9),
            Block.makeCuboidShape(13, 5, 7, 14, 7, 9),
            Block.makeCuboidShape(11, 8, 7, 12, 9, 9),
            Block.makeCuboidShape(8, 4, 7, 9, 6, 9),
            Block.makeCuboidShape(7, 5, 7, 8, 7, 9),
            Block.makeCuboidShape(9, 5, 8, 11, 9, 10),
            Block.makeCuboidShape(11, 5, 8, 12, 8, 10)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    public static final VoxelShape SHAPE_S_SPOON = Stream.of(
            Block.makeCuboidShape(1.7426399999999997, 5.68944, -0.7885099999999987, 4.74264, 8.68944, 2.2114899999999995),
            Block.makeCuboidShape(0, 0, 0, 16, 3, 16),
            Block.makeCuboidShape(12, 0.77522, 6.03992, 15, 2.77522, 8.03992),
            Block.makeCuboidShape(4.0907599999999995, 2.73729, 9, 7.0907599999999995, 4.73729, 11),
            Block.makeCuboidShape(6.8623899999999995, 1.5892400000000002, 11, 9.86239, 3.58924, 13),
            Block.makeCuboidShape(3, -0.6389899999999997, 4.6257, 7, 4.36101, 9.6257),
            Block.makeCuboidShape(5.70439, 0, 7.86778, 9.70439, 4, 12.86778),
            Block.makeCuboidShape(9.40988, 2.18206, 1.9343400000000006, 13.40988, 7.18206, 6.934340000000001),
            Block.makeCuboidShape(4.38476, 0.6261000000000001, 4.26896, 8.38476, 3.6261, 8.26896),
            Block.makeCuboidShape(9.88476, 1.9735, 2.7682699999999993, 14.88476, 3.9735, 7.768269999999999),
            Block.makeCuboidShape(8.70439, 2, 5.21092, 9.70439, 4, 7.21092),
            Block.makeCuboidShape(1.7426399999999997, 2, 4.55025, 3.7426399999999997, 4, 8.55025),
            Block.makeCuboidShape(3.7426399999999997, 2.27586, 5.1459600000000005, 4.74264, 5.27586, 6.1459600000000005),
            Block.makeCuboidShape(11.7428, 0, 3.376099999999999, 15.7428, 4, 8.3761),
            Block.makeCuboidShape(7.74264, 4.31327, 10.148729999999999, 8.74264, 5.31327, 13.14873),
            Block.makeCuboidShape(9.63095, 2.5, 9.00579, 11.63095, 3.5, 12.00579),
            Block.makeCuboidShape(4.8025199999999995, 2.5, 6.17736, 8.80252, 4.5, 10.17736),
            Block.makeCuboidShape(1.2279099999999996, 5.67883, 2.55025, 3.2279099999999996, 10.67883, 4.55025),
            Block.makeCuboidShape(1.2279099999999996, 5.67883, 4.55025, 3.2279099999999996, 7.67883, 6.55025),
            Block.makeCuboidShape(5.74264, 2, 1.5502500000000001, 7.74264, 4, 3.55025),
            Block.makeCuboidShape(9.93431, 0.24460999999999977, 10.55025, 11.93431, 2.2446099999999998, 15.55025),
            Block.makeCuboidShape(7, 1.83118, 12.0897, 9, 2.83118, 13.0897),
            Block.makeCuboidShape(6, 6, 8, 8, 9, 9),
            Block.makeCuboidShape(8, 7, 13, 10, 9, 14),
            Block.makeCuboidShape(8, 4, 14, 10, 8, 15),
            Block.makeCuboidShape(8, 3, 13, 10, 5, 14),
            Block.makeCuboidShape(8, 10, 10, 10, 11, 13),
            Block.makeCuboidShape(8, 9, 12, 10, 10, 14),
            Block.makeCuboidShape(8, 11, 6, 10, 12, 11),
            Block.makeCuboidShape(8, 6, 5, 10, 10, 6),
            Block.makeCuboidShape(8, 4, 6, 10, 7, 7),
            Block.makeCuboidShape(8, 3, 7, 10, 5, 8),
            Block.makeCuboidShape(8, 10, 5, 10, 13, 6),
            Block.makeCuboidShape(9, 10, 6, 10, 11, 7),
            Block.makeCuboidShape(8, 11, 4, 10, 14, 5),
            Block.makeCuboidShape(8, 12, 3, 10, 15, 4),
            Block.makeCuboidShape(8, 13, 2, 10, 16, 3),
            Block.makeCuboidShape(8, 14, 1, 10, 17, 2),
            Block.makeCuboidShape(8, 15, 0, 10, 18, 1),
            Block.makeCuboidShape(8, 16, -1, 10, 19, 0),
            Block.makeCuboidShape(8, 17, -2, 10, 20, -1),
            Block.makeCuboidShape(8, 19, -4, 10, 22, -3),
            Block.makeCuboidShape(8, 20, -5, 10, 22, -4),
            Block.makeCuboidShape(8, 18, -3, 10, 21, -2),
            Block.makeCuboidShape(7, 3, 8, 9, 4, 13),
            Block.makeCuboidShape(7, 9, 8, 9, 10, 12),
            Block.makeCuboidShape(7, 10, 6, 9, 11, 10),
            Block.makeCuboidShape(7, 4, 9, 9, 5, 12),
            Block.makeCuboidShape(7, 7, 6, 9, 10, 8),
            Block.makeCuboidShape(7, 4, 12, 9, 9, 13),
            Block.makeCuboidShape(7, 5, 13, 9, 7, 14),
            Block.makeCuboidShape(7, 8, 11, 9, 9, 12),
            Block.makeCuboidShape(7, 4, 8, 9, 6, 9),
            Block.makeCuboidShape(7, 5, 7, 9, 7, 8),
            Block.makeCuboidShape(6, 5, 9, 8, 9, 11),
            Block.makeCuboidShape(6, 5, 11, 8, 8, 12)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    public static final VoxelShape SHAPE_W_SPOON = Stream.of(
            Block.makeCuboidShape(13.78851, 5.68944, 1.7426399999999997, 16.78851, 8.68944, 4.74264),
            Block.makeCuboidShape(0, 0, 0, 16, 3, 16),
            Block.makeCuboidShape(7.96008, 0.77522, 12, 9.96008, 2.77522, 15),
            Block.makeCuboidShape(5, 2.73729, 4.0907599999999995, 7, 4.73729, 7.0907599999999995),
            Block.makeCuboidShape(3, 1.5892400000000002, 6.8623899999999995, 5, 3.58924, 9.86239),
            Block.makeCuboidShape(6.3743, -0.6389899999999997, 3, 11.3743, 4.36101, 7),
            Block.makeCuboidShape(3.1322200000000002, 0, 5.70439, 8.13222, 4, 9.70439),
            Block.makeCuboidShape(9.06566, 2.18206, 9.40988, 14.06566, 7.18206, 13.40988),
            Block.makeCuboidShape(7.73104, 0.6261000000000001, 4.38476, 11.73104, 3.6261, 8.38476),
            Block.makeCuboidShape(8.23173, 1.9735, 9.88476, 13.23173, 3.9735, 14.88476),
            Block.makeCuboidShape(8.78908, 2, 8.70439, 10.78908, 4, 9.70439),
            Block.makeCuboidShape(7.44975, 2, 1.7426399999999997, 11.44975, 4, 3.7426399999999997),
            Block.makeCuboidShape(9.85404, 2.27586, 3.7426399999999997, 10.85404, 5.27586, 4.74264),
            Block.makeCuboidShape(7.623900000000001, 0, 11.7428, 12.6239, 4, 15.7428),
            Block.makeCuboidShape(2.8512699999999995, 4.31327, 7.74264, 5.851270000000001, 5.31327, 8.74264),
            Block.makeCuboidShape(3.9942100000000007, 2.5, 9.63095, 6.994210000000001, 3.5, 11.63095),
            Block.makeCuboidShape(5.82264, 2.5, 4.8025199999999995, 9.82264, 4.5, 8.80252),
            Block.makeCuboidShape(11.44975, 5.67883, 1.2279099999999996, 13.44975, 10.67883, 3.2279099999999996),
            Block.makeCuboidShape(9.44975, 5.67883, 1.2279099999999996, 11.44975, 7.67883, 3.2279099999999996),
            Block.makeCuboidShape(12.44975, 2, 5.74264, 14.44975, 4, 7.74264),
            Block.makeCuboidShape(0.44974999999999987, 0.24460999999999977, 9.93431, 5.44975, 2.2446099999999998, 11.93431),
            Block.makeCuboidShape(2.9102999999999994, 1.83118, 7, 3.9102999999999994, 2.83118, 9),
            Block.makeCuboidShape(7, 6, 6, 8, 9, 8),
            Block.makeCuboidShape(2, 7, 8, 3, 9, 10),
            Block.makeCuboidShape(1, 4, 8, 2, 8, 10),
            Block.makeCuboidShape(2, 3, 8, 3, 5, 10),
            Block.makeCuboidShape(3, 10, 8, 6, 11, 10),
            Block.makeCuboidShape(2, 9, 8, 4, 10, 10),
            Block.makeCuboidShape(5, 11, 8, 10, 12, 10),
            Block.makeCuboidShape(10, 6, 8, 11, 10, 10),
            Block.makeCuboidShape(9, 4, 8, 10, 7, 10),
            Block.makeCuboidShape(8, 3, 8, 9, 5, 10),
            Block.makeCuboidShape(10, 10, 8, 11, 13, 10),
            Block.makeCuboidShape(9, 10, 9, 10, 11, 10),
            Block.makeCuboidShape(11, 11, 8, 12, 14, 10),
            Block.makeCuboidShape(12, 12, 8, 13, 15, 10),
            Block.makeCuboidShape(13, 13, 8, 14, 16, 10),
            Block.makeCuboidShape(14, 14, 8, 15, 17, 10),
            Block.makeCuboidShape(15, 15, 8, 16, 18, 10),
            Block.makeCuboidShape(16, 16, 8, 17, 19, 10),
            Block.makeCuboidShape(17, 17, 8, 18, 20, 10),
            Block.makeCuboidShape(19, 19, 8, 20, 22, 10),
            Block.makeCuboidShape(20, 20, 8, 21, 22, 10),
            Block.makeCuboidShape(18, 18, 8, 19, 21, 10),
            Block.makeCuboidShape(3, 3, 7, 8, 4, 9),
            Block.makeCuboidShape(4, 9, 7, 8, 10, 9),
            Block.makeCuboidShape(6, 10, 7, 10, 11, 9),
            Block.makeCuboidShape(4, 4, 7, 7, 5, 9),
            Block.makeCuboidShape(8, 7, 7, 10, 10, 9),
            Block.makeCuboidShape(3, 4, 7, 4, 9, 9),
            Block.makeCuboidShape(2, 5, 7, 3, 7, 9),
            Block.makeCuboidShape(4, 8, 7, 5, 9, 9),
            Block.makeCuboidShape(7, 4, 7, 8, 6, 9),
            Block.makeCuboidShape(8, 5, 7, 9, 7, 9),
            Block.makeCuboidShape(5, 5, 6, 7, 9, 8),
            Block.makeCuboidShape(4, 5, 6, 5, 8, 8)
    ).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);}).get();

    private static final DirectionProperty FACING = HorizontalBlock.HORIZONTAL_FACING;

    public FullMound(Properties properties){
        super(properties);
    }

    @SuppressWarnings("deprecation")
    @Override
    public VoxelShape getShape(BlockState state, IBlockReader worldIn,
                               BlockPos pos, ISelectionContext context){
        switch(state.get(FACING)){
            case SOUTH:
                return SHAPE_S;
            case EAST:
                return SHAPE_E;
            case WEST:
                return SHAPE_W;
            default:
                return SHAPE_N;
        }
    }

    @Override
    public BlockState getStateForPlacement(BlockItemUseContext context){
        return this.getDefaultState().with(FACING, context.getPlacementHorizontalFacing().getOpposite());
    }

    @SuppressWarnings("deprecation")
    @Override
    public BlockState rotate(BlockState state, Rotation rot){
        return state.with(FACING, rot.rotate(state.get(FACING)));
    }

    @SuppressWarnings("deprecation")
    @Override
    public BlockState mirror(BlockState state, Mirror mirrorIn){
        return state.rotate(mirrorIn.toRotation(state.get(FACING)));
    }

    @Override
    protected void fillStateContainer(StateContainer.Builder<Block, BlockState> builder){
        builder.add(FACING);
    }

    public static class SwordMound extends FullMound{

        @Override
        public TileEntity createTileEntity(BlockState state, IBlockReader world){
            return new MoundTile();
        }

        @Override
        public boolean hasTileEntity(BlockState state){
            return true;
        }

        public SwordMound(Properties properties){
            super(properties);
        }

        @Override
        public void onBlockHarvested(World worldIn, BlockPos pos, BlockState state, PlayerEntity player) {
            dropItem(worldIn,player,pos);
            super.onBlockHarvested(worldIn,pos,state,player);
        }

        @SuppressWarnings("deprecation")
        @Override
        public ActionResultType onBlockActivated(BlockState state, World worldIn,
                                                 BlockPos pos, PlayerEntity player,
                                                 Hand handIn, BlockRayTraceResult hit) {
            if(worldIn.getTileEntity(pos) instanceof MoundTile) {
                if(player.getHeldItemMainhand().getItem() instanceof SwordItem) {
                    this.dropItem(worldIn,player,pos);
                    SwordItem sword = (SwordItem)player.getHeldItemMainhand().getItem();
                    Direction oldDirection = worldIn.getBlockState(pos)
                            .get(HorizontalBlock.HORIZONTAL_FACING);
                    boolean isSpoon = false;
                    SwordMound swordMound;
                    SpoonMound spoonMound = null;
                    switch(sword.getTier().toString()){
                        case "DIAMOND":
                            swordMound =
                                    (SwordMound)ModBlocks.DIAMOND_SWORD_MOUND.get().getBlock();
                            break;
                        case "GOLD":
                            swordMound =
                                    (SwordMound)ModBlocks.GOLDEN_SWORD_MOUND.get().getBlock();
                            break;
                        case "STONE":
                            swordMound =
                                    (SwordMound)ModBlocks.STONE_SWORD_MOUND.get().getBlock();
                            break;
                        case "WOOD":
                            swordMound =
                                    (SwordMound)ModBlocks.WOODEN_SWORD_MOUND.get().getBlock();
                            break;
                        case "IRON":
                            swordMound =
                                    (SwordMound)ModBlocks.IRON_SWORD_MOUND.get().getBlock();
                            break;
                        case "SPOON":
                            isSpoon = true;
                            spoonMound = (SpoonMound)ModBlocks.COMICALLY_LARGE_SPOON_MOUND
                                    .get().getBlock();

                        default:  //Netherite
                            swordMound =
                                    (FullMound.SwordMound)ModBlocks.NETHERITE_SWORD_MOUND.get().getBlock();
                            break;
                    }
                    switch(oldDirection){
                        case EAST:
                            if(isSpoon){
                                worldIn.setBlockState(pos,
                                        spoonMound.rotate(spoonMound.getDefaultState(),
                                                Rotation.CLOCKWISE_90));
                                break;
                            }
                            worldIn.setBlockState(pos,
                                    swordMound.rotate(swordMound.getDefaultState(),
                                            Rotation.CLOCKWISE_90));
                            break;
                        case SOUTH:
                            if(isSpoon){
                                worldIn.setBlockState(pos,
                                        spoonMound.rotate(spoonMound.getDefaultState(),
                                                Rotation.CLOCKWISE_180));
                                break;
                            }
                            worldIn.setBlockState(pos,
                                    swordMound.rotate(swordMound.getDefaultState(),
                                            Rotation.CLOCKWISE_180));
                            break;
                        case WEST:
                            if(isSpoon){
                                worldIn.setBlockState(pos,
                                        spoonMound.rotate(spoonMound.getDefaultState(),
                                                Rotation.COUNTERCLOCKWISE_90));
                                break;
                            }
                            worldIn.setBlockState(pos,
                                    swordMound.rotate(swordMound.getDefaultState(),
                                            Rotation.COUNTERCLOCKWISE_90));
                            break;
                        default:
                            if(isSpoon){
                                worldIn.setBlockState(pos, spoonMound.getDefaultState());
                                break;
                            }
                            worldIn.setBlockState(pos, swordMound.getDefaultState());
                            break;
                    }
                    worldIn.playSound(pos.getX(),pos.getY(),pos.getZ(),
                            SoundEvents.BLOCK_ANVIL_PLACE,SoundCategory.BLOCKS,
                            100f,50f,false);
                    ((MoundTile) worldIn.getTileEntity(pos))
                            .setContainedTool(player.getHeldItemMainhand().copy());
                    player.getHeldItemMainhand().shrink(1);
                    return ActionResultType.SUCCESS;
                }
            }
            return ActionResultType.PASS;
        }

        private void dropItem(World world, PlayerEntity player, BlockPos pos){
            TileEntity tileentity = world.getTileEntity(pos);
            if (tileentity instanceof MoundTile) {
                MoundTile moundEntity = (MoundTile)tileentity;
                ItemStack itemstack = moundEntity.getContainedTool();
                if (!(itemstack.isEmpty())) {
                    //Copied from how drops are randomly spread in other classes
                    float f = 0.7F;
                    double d0 = (double)(world.rand.nextFloat() * 0.7F) + (double)0.15F;
                    double d1 = (double)(world.rand.nextFloat() * 0.7F) + (double)0.060000002F + 0.6D;
                    double d2 = (double)(world.rand.nextFloat() * 0.7F) + (double)0.15F;
                    ItemStack copyStack = itemstack.copy();
                    ItemEntity itementity = new ItemEntity(world, (double)pos.getX() + d0,
                            (double)pos.getY() + d1, (double)pos.getZ() + d2, copyStack);
                    itementity.setDefaultPickupDelay();
                    world.addEntity(itementity);
                    moundEntity.setContainedTool(ItemStack.EMPTY);
                }
            }
        }
    }

    public static class SpoonMound extends SwordMound{

        public SpoonMound(Properties properties){
            super(properties);
        }

        @SuppressWarnings("deprecation")
        @Override
        public VoxelShape getShape(BlockState state, IBlockReader worldIn,
                                   BlockPos pos, ISelectionContext context){
            switch(state.get(FACING)){
                case SOUTH:
                    return SHAPE_S_SPOON;
                case EAST:
                    return SHAPE_E_SPOON;
                case WEST:
                    return SHAPE_W_SPOON;
                default:
                    return SHAPE_N_SPOON;
            }
        }

    }

    @Override
    @SuppressWarnings("deprecation")
    public BlockRenderType getRenderType(BlockState state) {
        return BlockRenderType.MODEL;
    }
}
